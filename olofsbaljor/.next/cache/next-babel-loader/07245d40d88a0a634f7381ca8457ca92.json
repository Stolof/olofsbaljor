{"ast":null,"code":"\"use strict\";\n\nvar _contentful = require(\"contentful\");\n\nconst client = (0, _contentful.createClient)({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN\n});\n\nasync function getEntry(id) {\n  const recipe = await client.getEntry(id);\n  return parseForm(recipe);\n}\n\nasync function getAllRecipes() {\n  const recipes = await client.getEntries({\n    'content_type': 'recipe'\n  });\n  return recipes;\n}\n\nfunction parseForm(recipe) {\n  return {\n    recipe: recipe.fields\n  };\n}\n\nasync function getNutrientForAllRecipes(recipes) {\n  let nutrientsPerRecipe = {};\n\n  for (const recipe of recipes) {\n    const ingredients = recipe.fields.ingredients;\n    const amounts = recipe.fields.amount;\n    console.log('AMounts: ', amounts);\n    const recipeNutrients = await getNutrientsForRecipe(ingredients);\n    nutrientsPerRecipe[recipe.fields.title] = recipeNutrients;\n  }\n\n  ;\n  return nutrientsPerRecipe;\n}\n\nasync function getNutrientsForRecipe(ingredients) {\n  let recipeNutrients = {};\n\n  for (const ingredient of ingredients) {\n    // console.log('Ingredient', ingredient);\n    const productId = ingredient.fields.id;\n    const productNutrients = await getNutrientsForProduct(productId);\n\n    for (const nutrient of productNutrients) {\n      if (nutrient.name in recipeNutrients) {\n        recipeNutrients[nutrient.name] = nutrient.value + recipeNutrients[nutrient.name];\n      } else {\n        recipeNutrients[nutrient.name] = nutrient.value;\n      }\n    }\n\n    ;\n  }\n\n  return recipeNutrients;\n}\n\nasync function getNutrientsForProduct(productId) {\n  const livsmedelkollenAPI = 'https://api.livsmedelkollen.se/foodstuffs/';\n  const res = await fetch(livsmedelkollenAPI + productId, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const nutrients = await res.json();\n  return await nutrients;\n}\n\nmodule.exports = {\n  getEntry: getEntry,\n  getAllRecipes: getAllRecipes,\n  getNutrientForAllRecipes: getNutrientForAllRecipes\n};","map":{"version":3,"sources":["/Users/olof.marklund/Documents/projects/my_projects/olofsbaljor/olofsbaljor/lib/api.js"],"names":["client","space","process","env","NEXT_PUBLIC_CONTENTFUL_SPACE_ID","accessToken","NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN","getEntry","id","recipe","parseForm","getAllRecipes","recipes","getEntries","fields","getNutrientForAllRecipes","nutrientsPerRecipe","ingredients","amounts","amount","console","log","recipeNutrients","getNutrientsForRecipe","title","ingredient","productId","productNutrients","getNutrientsForProduct","nutrient","name","value","livsmedelkollenAPI","res","fetch","method","headers","nutrients","json","module","exports"],"mappings":";;AAAA;;AAEA,MAAMA,MAAM,GAAG,8BAAa;AAC1BC,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,+BADO;AAE1BC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFC,CAAb,CAAf;;AAKA,eAAeC,QAAf,CAAwBC,EAAxB,EAA4B;AACxB,QAAMC,MAAM,GAAG,MAAMT,MAAM,CAACO,QAAP,CAAgBC,EAAhB,CAArB;AACA,SAAOE,SAAS,CAACD,MAAD,CAAhB;AACD;;AAEH,eAAeE,aAAf,GAA+B;AAC3B,QAAMC,OAAO,GAAG,MAAMZ,MAAM,CAACa,UAAP,CAAkB;AAAC,oBAAgB;AAAjB,GAAlB,CAAtB;AACA,SAAOD,OAAP;AACD;;AAEH,SAASF,SAAT,CAAmBD,MAAnB,EAA2B;AACvB,SAAO;AACHA,IAAAA,MAAM,EAAEA,MAAM,CAACK;AADZ,GAAP;AAGH;;AAED,eAAeC,wBAAf,CAAwCH,OAAxC,EAAgD;AAC9C,MAAII,kBAAkB,GAAG,EAAzB;;AACC,OAAK,MAAMP,MAAX,IAAqBG,OAArB,EAA8B;AAC7B,UAAMK,WAAW,GAAGR,MAAM,CAACK,MAAP,CAAcG,WAAlC;AACA,UAAMC,OAAO,GAAGT,MAAM,CAACK,MAAP,CAAcK,MAA9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,OAAzB;AAEA,UAAMI,eAAe,GAAG,MAAMC,qBAAqB,CAACN,WAAD,CAAnD;AACAD,IAAAA,kBAAkB,CAACP,MAAM,CAACK,MAAP,CAAcU,KAAf,CAAlB,GAA0CF,eAA1C;AACD;;AAAA;AACD,SAAON,kBAAP;AACD;;AAED,eAAeO,qBAAf,CAAqCN,WAArC,EAAkD;AAChD,MAAIK,eAAe,GAAG,EAAtB;;AACA,OAAK,MAAMG,UAAX,IAAyBR,WAAzB,EAAqC;AACnC;AAEA,UAAMS,SAAS,GAAGD,UAAU,CAACX,MAAX,CAAkBN,EAApC;AACA,UAAMmB,gBAAgB,GAAG,MAAMC,sBAAsB,CAACF,SAAD,CAArD;;AACE,SAAK,MAAMG,QAAX,IAAuBF,gBAAvB,EAA0C;AACxC,UAAGE,QAAQ,CAACC,IAAT,IAAiBR,eAApB,EAAqC;AACnCA,QAAAA,eAAe,CAACO,QAAQ,CAACC,IAAV,CAAf,GAAiCD,QAAQ,CAACE,KAAT,GAAiBT,eAAe,CAACO,QAAQ,CAACC,IAAV,CAAjE;AACD,OAFD,MAEO;AACLR,QAAAA,eAAe,CAACO,QAAQ,CAACC,IAAV,CAAf,GAAiCD,QAAQ,CAACE,KAA1C;AACD;AACF;;AAAA;AACJ;;AACD,SAAOT,eAAP;AACD;;AAED,eAAeM,sBAAf,CAAsCF,SAAtC,EAAgD;AAC9C,QAAMM,kBAAkB,GAAG,4CAA3B;AACE,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,kBAAkB,GAAGN,SAAtB,EAAgC;AACrDS,IAAAA,MAAM,EAAE,KAD6C;AAErDC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAF4C,GAAhC,CAAvB;AAIA,QAAMC,SAAS,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAxB;AACA,SAAO,MAAMD,SAAb;AACH;;AAGDE,MAAM,CAACC,OAAP,GAAiB;AACfjC,EAAAA,QAAQ,EAAEA,QADK;AAEfI,EAAAA,aAAa,EAAEA,aAFA;AAGfI,EAAAA,wBAAwB,EAAEA;AAHX,CAAjB","sourcesContent":["import { createClient } from 'contentful'\n\nconst client = createClient({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN,\n})\n\nasync function getEntry(id) {\n    const recipe = await client.getEntry(id)\n    return parseForm(recipe)\n  }\n\nasync function getAllRecipes() {\n    const recipes = await client.getEntries({'content_type': 'recipe'})\n    return recipes\n  }\n\nfunction parseForm(recipe) {\n    return {\n        recipe: recipe.fields,\n    }\n}\n\nasync function getNutrientForAllRecipes(recipes){\n  let nutrientsPerRecipe = {}\n   for (const recipe of recipes) {\n    const ingredients = recipe.fields.ingredients\n    const amounts = recipe.fields.amount\n    console.log('AMounts: ', amounts);\n    \n    const recipeNutrients = await getNutrientsForRecipe(ingredients)\n    nutrientsPerRecipe[recipe.fields.title] = recipeNutrients\n  };\n  return nutrientsPerRecipe\n}\n\nasync function getNutrientsForRecipe(ingredients) {\n  let recipeNutrients = {}\n  for (const ingredient of ingredients){\n    // console.log('Ingredient', ingredient);\n    \n    const productId = ingredient.fields.id\n    const productNutrients = await getNutrientsForProduct(productId) \n      for (const nutrient of productNutrients ) {\n        if(nutrient.name in recipeNutrients) {\n          recipeNutrients[nutrient.name] = nutrient.value + recipeNutrients[nutrient.name]\n        } else {\n          recipeNutrients[nutrient.name] = nutrient.value \n        }\n      };\n  }\n  return recipeNutrients\n}\n\nasync function getNutrientsForProduct(productId){\n  const livsmedelkollenAPI = 'https://api.livsmedelkollen.se/foodstuffs/'\n    const res = await fetch(livsmedelkollenAPI + productId,{\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'}\n    })\n    const nutrients = await res.json()\n    return await nutrients\n}\n\n\nmodule.exports = {\n  getEntry: getEntry,\n  getAllRecipes: getAllRecipes,\n  getNutrientForAllRecipes: getNutrientForAllRecipes,\n}"]},"metadata":{},"sourceType":"script"}