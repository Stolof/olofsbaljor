{"ast":null,"code":"\"use strict\";\n\nvar _contentful = require(\"contentful\");\n\nconst client = (0, _contentful.createClient)({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN\n});\n\nasync function getEntry(id) {\n  const recipe = await client.getEntry(id);\n  return parseForm(recipe);\n}\n\nasync function getAllRecipes() {\n  const recipes = await client.getEntries({\n    'content_type': 'recipe'\n  });\n  return recipes;\n}\n\nfunction parseForm(recipe) {\n  return {\n    recipe: recipe.fields\n  };\n}\n\nfunction getNutrientForAllRecipes(recipes) {}\n\nfunction getNutrientsForRecipe(ingredients) {\n  let nutrients = {};\n  ingredients.forEach(i => {\n    const productId = i.fields.id;\n    const productName = i.fields.name;\n    nutrients[productName] = getNutrientsForProduct(productId);\n  });\n  return nutrients;\n}\n\nasync function getNutrientsForProduct(productId) {\n  const livsmedelkollenAPI = 'https://api.livsmedelkollen.se/foodstuffs/';\n  const res = await fetch(livsmedelkollenAPI + \"881\", {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const nutriecients = await res.json();\n  return nutriecients;\n}\n\nmodule.exports = {\n  getEntry: getEntry,\n  getAllRecipes: getAllRecipes,\n  getNutrientsForProduct: getNutrientsForProduct\n};","map":{"version":3,"sources":["/Users/olof.marklund/Documents/projects/my_projects/olofsbaljor/olofsbaljor/lib/api.js"],"names":["client","space","process","env","NEXT_PUBLIC_CONTENTFUL_SPACE_ID","accessToken","NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN","getEntry","id","recipe","parseForm","getAllRecipes","recipes","getEntries","fields","getNutrientForAllRecipes","getNutrientsForRecipe","ingredients","nutrients","forEach","i","productId","productName","name","getNutrientsForProduct","livsmedelkollenAPI","res","fetch","method","headers","nutriecients","json","module","exports"],"mappings":";;AAAA;;AAEA,MAAMA,MAAM,GAAG,8BAAa;AAC1BC,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,+BADO;AAE1BC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFC,CAAb,CAAf;;AAKA,eAAeC,QAAf,CAAwBC,EAAxB,EAA4B;AACxB,QAAMC,MAAM,GAAG,MAAMT,MAAM,CAACO,QAAP,CAAgBC,EAAhB,CAArB;AACA,SAAOE,SAAS,CAACD,MAAD,CAAhB;AACD;;AAEH,eAAeE,aAAf,GAA+B;AAC3B,QAAMC,OAAO,GAAG,MAAMZ,MAAM,CAACa,UAAP,CAAkB;AAAC,oBAAgB;AAAjB,GAAlB,CAAtB;AACA,SAAOD,OAAP;AACD;;AAEH,SAASF,SAAT,CAAmBD,MAAnB,EAA2B;AACvB,SAAO;AACHA,IAAAA,MAAM,EAAEA,MAAM,CAACK;AADZ,GAAP;AAGH;;AAED,SAASC,wBAAT,CAAkCH,OAAlC,EAA0C,CAEzC;;AACD,SAASI,qBAAT,CAA+BC,WAA/B,EAA2C;AACzC,MAAIC,SAAS,GAAG,EAAhB;AAEAD,EAAAA,WAAW,CAACE,OAAZ,CAAoBC,CAAC,IAAI;AACvB,UAAMC,SAAS,GAAGD,CAAC,CAACN,MAAF,CAASN,EAA3B;AACA,UAAMc,WAAW,GAAGF,CAAC,CAACN,MAAF,CAASS,IAA7B;AACAL,IAAAA,SAAS,CAACI,WAAD,CAAT,GAAyBE,sBAAsB,CAACH,SAAD,CAA/C;AACD,GAJD;AAKA,SAAOH,SAAP;AACD;;AAED,eAAeM,sBAAf,CAAsCH,SAAtC,EAAgD;AAC9C,QAAMI,kBAAkB,GAAG,4CAA3B;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,kBAAkB,GAAG,KAAtB,EAA4B;AACjDG,IAAAA,MAAM,EAAE,KADyC;AAEjDC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAFwC,GAA5B,CAAvB;AAIA,QAAMC,YAAY,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAA3B;AACA,SAAOD,YAAP;AACD;;AAGDE,MAAM,CAACC,OAAP,GAAiB;AACf1B,EAAAA,QAAQ,EAAEA,QADK;AAEfI,EAAAA,aAAa,EAAEA,aAFA;AAGfa,EAAAA,sBAAsB,EAAEA;AAHT,CAAjB","sourcesContent":["import { createClient } from 'contentful'\n\nconst client = createClient({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN,\n})\n\nasync function getEntry(id) {\n    const recipe = await client.getEntry(id)\n    return parseForm(recipe)\n  }\n\nasync function getAllRecipes() {\n    const recipes = await client.getEntries({'content_type': 'recipe'})\n    return recipes\n  }\n\nfunction parseForm(recipe) {\n    return {\n        recipe: recipe.fields,\n    }\n}\n\nfunction getNutrientForAllRecipes(recipes){\n\n}\nfunction getNutrientsForRecipe(ingredients){\n  let nutrients = {}\n\n  ingredients.forEach(i => {\n    const productId = i.fields.id\n    const productName = i.fields.name\n    nutrients[productName] = getNutrientsForProduct(productId)\n  });\n  return nutrients\n}\n\nasync function getNutrientsForProduct(productId){\n  const livsmedelkollenAPI = 'https://api.livsmedelkollen.se/foodstuffs/'\n  const res = await fetch(livsmedelkollenAPI + \"881\",{\n    method: 'GET',\n    headers: {'Content-Type': 'application/json'}\n  })\n  const nutriecients = await res.json()\n  return nutriecients\n}\n\n\nmodule.exports = {\n  getEntry: getEntry,\n  getAllRecipes: getAllRecipes,\n  getNutrientsForProduct: getNutrientsForProduct,\n}"]},"metadata":{},"sourceType":"script"}