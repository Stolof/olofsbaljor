{"ast":null,"code":"\"use strict\";\n\nvar _contentful = require(\"contentful\");\n\nconst client = (0, _contentful.createClient)({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN\n});\n\nasync function getEntry(id) {\n  const recipe = await client.getEntry(id);\n  return parseForm(recipe);\n}\n\nasync function getAllRecipes() {\n  const recipes = await client.getEntries({\n    'content_type': 'recipe'\n  });\n  return recipes;\n}\n\nfunction parseForm(recipe) {\n  return {\n    recipe: recipe.fields\n  };\n}\n\nasync function getNutrientForAllRecipes(recipes) {\n  let nutrientsPerRecipe = {};\n\n  for (const recipe of recipes) {\n    const ingredients = recipe.fields.ingredients;\n    const recipeNutrients = await getNutrientsForRecipe(ingredients);\n    console.log('Nutrient RECIPE: ', recipeNutrients); // const result = await Promise.all(recipeNutrients)\n\n    nutrientsPerRecipe[recipe.fields.title] = recipeNutrients;\n  }\n\n  ;\n  return nutrientsPerRecipe;\n}\n\nasync function getNutrientsForRecipe(ingredients) {\n  console.log('1');\n  let recipeNutrients = {};\n\n  for (const ingredient in ingredients) {\n    console.log('ingredients: ', ingredient);\n    console.log('2');\n    const productId = ingredient.fields.id; // const productName = i.fields.name\n\n    const productNutrients = await getNutrientsForProduct(productId);\n    console.log('productNutrient:');\n\n    for (const nutrient of productNutrients) {\n      recipeNutrients[nutrient.name] = await nutrient.value;\n    }\n\n    ; // await getNutrientsForProduct(productId).then( async (productNutrients) => {\n    // console.log('productNutrient:' );\n    // await productNutrients.forEach(nutrient => {\n    // // console.log('Nutrient: ', nutrient.name);\n    // recipeNutrients[nutrient.name] = nutrient.value\n    // });\n    // })\n  }\n\n  return recipeNutrients;\n}\n\nasync function getNutrientsForProduct(productId) {\n  console.log('3');\n  const livsmedelkollenAPI = 'https://api.livsmedelkollen.se/foodstuffs/';\n  const res = await fetch(livsmedelkollenAPI + \"881\", {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  console.log('4');\n  const nutrients = await res.json();\n  return await nutrients;\n}\n\nmodule.exports = {\n  getEntry: getEntry,\n  getAllRecipes: getAllRecipes,\n  getNutrientForAllRecipes: getNutrientForAllRecipes\n};","map":{"version":3,"sources":["/Users/olof.marklund/Documents/projects/my_projects/olofsbaljor/olofsbaljor/lib/api.js"],"names":["client","space","process","env","NEXT_PUBLIC_CONTENTFUL_SPACE_ID","accessToken","NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN","getEntry","id","recipe","parseForm","getAllRecipes","recipes","getEntries","fields","getNutrientForAllRecipes","nutrientsPerRecipe","ingredients","recipeNutrients","getNutrientsForRecipe","console","log","title","ingredient","productId","productNutrients","getNutrientsForProduct","nutrient","name","value","livsmedelkollenAPI","res","fetch","method","headers","nutrients","json","module","exports"],"mappings":";;AAAA;;AAEA,MAAMA,MAAM,GAAG,8BAAa;AAC1BC,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,+BADO;AAE1BC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFC,CAAb,CAAf;;AAKA,eAAeC,QAAf,CAAwBC,EAAxB,EAA4B;AACxB,QAAMC,MAAM,GAAG,MAAMT,MAAM,CAACO,QAAP,CAAgBC,EAAhB,CAArB;AACA,SAAOE,SAAS,CAACD,MAAD,CAAhB;AACD;;AAEH,eAAeE,aAAf,GAA+B;AAC3B,QAAMC,OAAO,GAAG,MAAMZ,MAAM,CAACa,UAAP,CAAkB;AAAC,oBAAgB;AAAjB,GAAlB,CAAtB;AACA,SAAOD,OAAP;AACD;;AAEH,SAASF,SAAT,CAAmBD,MAAnB,EAA2B;AACvB,SAAO;AACHA,IAAAA,MAAM,EAAEA,MAAM,CAACK;AADZ,GAAP;AAGH;;AAED,eAAeC,wBAAf,CAAwCH,OAAxC,EAAgD;AAC9C,MAAII,kBAAkB,GAAG,EAAzB;;AAEC,OAAK,MAAMP,MAAX,IAAqBG,OAArB,EAA8B;AAC7B,UAAMK,WAAW,GAAGR,MAAM,CAACK,MAAP,CAAcG,WAAlC;AACA,UAAMC,eAAe,GAAG,MAAMC,qBAAqB,CAACF,WAAD,CAAnD;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCH,eAAjC,EAH6B,CAI7B;;AACAF,IAAAA,kBAAkB,CAACP,MAAM,CAACK,MAAP,CAAcQ,KAAf,CAAlB,GAA0CJ,eAA1C;AACD;;AAAA;AACD,SAAOF,kBAAP;AACD;;AAED,eAAeG,qBAAf,CAAqCF,WAArC,EAAkD;AAChDG,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AAEA,MAAIH,eAAe,GAAG,EAAtB;;AACA,OAAK,MAAMK,UAAX,IAAyBN,WAAzB,EAAqC;AACnCG,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,UAA7B;AAEAH,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,UAAMG,SAAS,GAAGD,UAAU,CAACT,MAAX,CAAkBN,EAApC,CAJmC,CAKnC;;AACA,UAAMiB,gBAAgB,GAAG,MAAMC,sBAAsB,CAACF,SAAD,CAArD;AACEJ,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AACA,SAAK,MAAMM,QAAX,IAAuBF,gBAAvB,EAA0C;AACxCP,MAAAA,eAAe,CAACS,QAAQ,CAACC,IAAV,CAAf,GAAiC,MAAMD,QAAQ,CAACE,KAAhD;AACD;;AAAA,KAVgC,CAWnC;AACE;AACA;AACE;AAEA;AACF;AACF;AACD;;AACD,SAAOX,eAAP;AACD;;AAED,eAAeQ,sBAAf,CAAsCF,SAAtC,EAAgD;AAC5CJ,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACF,QAAMS,kBAAkB,GAAG,4CAA3B;AACE,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,kBAAkB,GAAG,KAAtB,EAA4B;AACjDG,IAAAA,MAAM,EAAE,KADyC;AAEjDC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAFwC,GAA5B,CAAvB;AAIAd,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,QAAMc,SAAS,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAxB;AACA,SAAO,MAAMD,SAAb;AACH;;AAGDE,MAAM,CAACC,OAAP,GAAiB;AACf/B,EAAAA,QAAQ,EAAEA,QADK;AAEfI,EAAAA,aAAa,EAAEA,aAFA;AAGfI,EAAAA,wBAAwB,EAAEA;AAHX,CAAjB","sourcesContent":["import { createClient } from 'contentful'\n\nconst client = createClient({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN,\n})\n\nasync function getEntry(id) {\n    const recipe = await client.getEntry(id)\n    return parseForm(recipe)\n  }\n\nasync function getAllRecipes() {\n    const recipes = await client.getEntries({'content_type': 'recipe'})\n    return recipes\n  }\n\nfunction parseForm(recipe) {\n    return {\n        recipe: recipe.fields,\n    }\n}\n\nasync function getNutrientForAllRecipes(recipes){\n  let nutrientsPerRecipe = {}\n\n   for (const recipe of recipes) {\n    const ingredients = recipe.fields.ingredients\n    const recipeNutrients = await getNutrientsForRecipe(ingredients)\n    console.log('Nutrient RECIPE: ', recipeNutrients )\n    // const result = await Promise.all(recipeNutrients)\n    nutrientsPerRecipe[recipe.fields.title] = recipeNutrients\n  };\n  return nutrientsPerRecipe\n}\n\nasync function getNutrientsForRecipe(ingredients) {\n  console.log('1');\n  \n  let recipeNutrients = {}\n  for (const ingredient in ingredients){\n    console.log('ingredients: ', ingredient );\n    \n    console.log('2');\n    const productId = ingredient.fields.id\n    // const productName = i.fields.name\n    const productNutrients = await getNutrientsForProduct(productId) \n      console.log('productNutrient:' );\n      for (const nutrient of productNutrients ) {\n        recipeNutrients[nutrient.name] = await nutrient.value\n      };\n    // await getNutrientsForProduct(productId).then( async (productNutrients) => {\n      // console.log('productNutrient:' );\n      // await productNutrients.forEach(nutrient => {\n        // // console.log('Nutrient: ', nutrient.name);\n        \n        // recipeNutrients[nutrient.name] = nutrient.value\n      // });\n    // })\n  }\n  return recipeNutrients\n}\n\nasync function getNutrientsForProduct(productId){\n    console.log('3');\n  const livsmedelkollenAPI = 'https://api.livsmedelkollen.se/foodstuffs/'\n    const res = await fetch(livsmedelkollenAPI + \"881\",{\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'}\n    })\n    console.log('4');\n    const nutrients = await res.json()\n    return await nutrients\n}\n\n\nmodule.exports = {\n  getEntry: getEntry,\n  getAllRecipes: getAllRecipes,\n  getNutrientForAllRecipes: getNutrientForAllRecipes,\n}"]},"metadata":{},"sourceType":"script"}