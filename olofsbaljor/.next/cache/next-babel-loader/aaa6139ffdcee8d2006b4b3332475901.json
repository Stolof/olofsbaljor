{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/asyncToGenerator\"));\n\nvar _contentful = require(\"contentful\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar client = (0, _contentful.createClient)({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN\n});\n\nfunction getEntry(_x) {\n  return _getEntry.apply(this, arguments);\n}\n\nfunction _getEntry() {\n  _getEntry = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(id) {\n    var recipe;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.getEntry(id);\n\n          case 2:\n            recipe = _context.sent;\n            return _context.abrupt(\"return\", parseForm(recipe));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getEntry.apply(this, arguments);\n}\n\nfunction getAllRecipes() {\n  return _getAllRecipes.apply(this, arguments);\n}\n\nfunction _getAllRecipes() {\n  _getAllRecipes = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n    var recipes;\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return client.getEntries({\n              'content_type': 'recipe'\n            });\n\n          case 2:\n            recipes = _context2.sent;\n            return _context2.abrupt(\"return\", recipes);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAllRecipes.apply(this, arguments);\n}\n\nfunction parseForm(recipe) {\n  return {\n    recipe: recipe.fields\n  };\n}\n\nfunction getNutrientForAllRecipes(_x2) {\n  return _getNutrientForAllRecipes.apply(this, arguments);\n}\n\nfunction _getNutrientForAllRecipes() {\n  _getNutrientForAllRecipes = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(recipes) {\n    var nutrientsPerRecipe, _iterator, _step, recipe, ingredients, recipeNutrients;\n\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            nutrientsPerRecipe = {};\n            _iterator = _createForOfIteratorHelper(recipes);\n            _context3.prev = 2;\n\n            _iterator.s();\n\n          case 4:\n            if ((_step = _iterator.n()).done) {\n              _context3.next = 15;\n              break;\n            }\n\n            recipe = _step.value;\n            console.log('recipe', recipe);\n            ingredients = recipe.fields.ingredients[_].fields;\n            _context3.next = 10;\n            return getNutrientsForRecipe(ingredients);\n\n          case 10:\n            recipeNutrients = _context3.sent;\n            console.log('Nutrient RECIPE: ', recipeNutrients); // const result = await Promise.all(recipeNutrients)\n\n            nutrientsPerRecipe[recipe.fields.title] = recipeNutrients;\n\n          case 13:\n            _context3.next = 4;\n            break;\n\n          case 15:\n            _context3.next = 20;\n            break;\n\n          case 17:\n            _context3.prev = 17;\n            _context3.t0 = _context3[\"catch\"](2);\n\n            _iterator.e(_context3.t0);\n\n          case 20:\n            _context3.prev = 20;\n\n            _iterator.f();\n\n            return _context3.finish(20);\n\n          case 23:\n            ;\n            return _context3.abrupt(\"return\", nutrientsPerRecipe);\n\n          case 25:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[2, 17, 20, 23]]);\n  }));\n  return _getNutrientForAllRecipes.apply(this, arguments);\n}\n\nfunction getNutrientsForRecipe(_x3) {\n  return _getNutrientsForRecipe.apply(this, arguments);\n}\n\nfunction _getNutrientsForRecipe() {\n  _getNutrientsForRecipe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(ingredients) {\n    var recipeNutrients, ingredient, productId, productNutrients, _iterator2, _step2, nutrient;\n\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            console.log('1');\n            console.log('ingredients', ingredients);\n            recipeNutrients = {};\n            _context4.t0 = _regenerator[\"default\"].keys(ingredients);\n\n          case 4:\n            if ((_context4.t1 = _context4.t0()).done) {\n              _context4.next = 34;\n              break;\n            }\n\n            ingredient = _context4.t1.value;\n            console.log('ingredient', ingredients);\n            console.log('2');\n            productId = ingredient.fields.id; // const productName = i.fields.name\n\n            _context4.next = 11;\n            return getNutrientsForProduct(productId);\n\n          case 11:\n            productNutrients = _context4.sent;\n            console.log('productNutrient:');\n            _iterator2 = _createForOfIteratorHelper(productNutrients);\n            _context4.prev = 14;\n\n            _iterator2.s();\n\n          case 16:\n            if ((_step2 = _iterator2.n()).done) {\n              _context4.next = 23;\n              break;\n            }\n\n            nutrient = _step2.value;\n            _context4.next = 20;\n            return nutrient.value;\n\n          case 20:\n            recipeNutrients[nutrient.name] = _context4.sent;\n\n          case 21:\n            _context4.next = 16;\n            break;\n\n          case 23:\n            _context4.next = 28;\n            break;\n\n          case 25:\n            _context4.prev = 25;\n            _context4.t2 = _context4[\"catch\"](14);\n\n            _iterator2.e(_context4.t2);\n\n          case 28:\n            _context4.prev = 28;\n\n            _iterator2.f();\n\n            return _context4.finish(28);\n\n          case 31:\n            ; // await getNutrientsForProduct(productId).then( async (productNutrients) => {\n            // console.log('productNutrient:' );\n            // await productNutrients.forEach(nutrient => {\n            // // console.log('Nutrient: ', nutrient.name);\n            // recipeNutrients[nutrient.name] = nutrient.value\n            // });\n            // })\n\n            _context4.next = 4;\n            break;\n\n          case 34:\n            return _context4.abrupt(\"return\", recipeNutrients);\n\n          case 35:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[14, 25, 28, 31]]);\n  }));\n  return _getNutrientsForRecipe.apply(this, arguments);\n}\n\nfunction getNutrientsForProduct(_x4) {\n  return _getNutrientsForProduct.apply(this, arguments);\n}\n\nfunction _getNutrientsForProduct() {\n  _getNutrientsForProduct = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(productId) {\n    var livsmedelkollenAPI, res, nutrients;\n    return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            console.log('3');\n            livsmedelkollenAPI = 'https://api.livsmedelkollen.se/foodstuffs/';\n            _context5.next = 4;\n            return fetch(livsmedelkollenAPI + \"881\", {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n\n          case 4:\n            res = _context5.sent;\n            console.log('4');\n            _context5.next = 8;\n            return res.json();\n\n          case 8:\n            nutrients = _context5.sent;\n            _context5.next = 11;\n            return nutrients;\n\n          case 11:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 12:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getNutrientsForProduct.apply(this, arguments);\n}\n\nmodule.exports = {\n  getEntry: getEntry,\n  getAllRecipes: getAllRecipes,\n  getNutrientForAllRecipes: getNutrientForAllRecipes\n};","map":{"version":3,"sources":["/Users/olof.marklund/Documents/projects/my_projects/olofsbaljor/olofsbaljor/lib/api.js"],"names":["client","space","process","env","NEXT_PUBLIC_CONTENTFUL_SPACE_ID","accessToken","NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN","getEntry","id","recipe","parseForm","getAllRecipes","getEntries","recipes","fields","getNutrientForAllRecipes","nutrientsPerRecipe","console","log","ingredients","_","getNutrientsForRecipe","recipeNutrients","title","ingredient","productId","getNutrientsForProduct","productNutrients","nutrient","value","name","livsmedelkollenAPI","fetch","method","headers","res","json","nutrients","module","exports"],"mappings":"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","sourcesContent":["import { createClient } from 'contentful'\n\nconst client = createClient({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN,\n})\n\nasync function getEntry(id) {\n    const recipe = await client.getEntry(id)\n    return parseForm(recipe)\n  }\n\nasync function getAllRecipes() {\n    const recipes = await client.getEntries({'content_type': 'recipe'})\n    return recipes\n  }\n\nfunction parseForm(recipe) {\n    return {\n        recipe: recipe.fields,\n    }\n}\n\nasync function getNutrientForAllRecipes(recipes){\n  let nutrientsPerRecipe = {}\n\n  \n   for (const recipe of recipes) {\n     console.log('recipe', recipe);\n     \n    const ingredients = recipe.fields.ingredients[_].fields\n    \n    const recipeNutrients = await getNutrientsForRecipe(ingredients)\n    console.log('Nutrient RECIPE: ', recipeNutrients )\n    // const result = await Promise.all(recipeNutrients)\n    nutrientsPerRecipe[recipe.fields.title] = recipeNutrients\n  };\n  return nutrientsPerRecipe\n}\n\nasync function getNutrientsForRecipe(ingredients) {\n  console.log('1');\n    console.log('ingredients', ingredients);\n  \n  let recipeNutrients = {}\n  for (const ingredient in ingredients){\n    console.log('ingredient', ingredients);\n    \n    console.log('2');\n    const productId = ingredient.fields.id\n    // const productName = i.fields.name\n    const productNutrients = await getNutrientsForProduct(productId) \n      console.log('productNutrient:' );\n      for (const nutrient of productNutrients ) {\n        recipeNutrients[nutrient.name] = await nutrient.value\n      };\n    // await getNutrientsForProduct(productId).then( async (productNutrients) => {\n      // console.log('productNutrient:' );\n      // await productNutrients.forEach(nutrient => {\n        // // console.log('Nutrient: ', nutrient.name);\n        \n        // recipeNutrients[nutrient.name] = nutrient.value\n      // });\n    // })\n  }\n  return recipeNutrients\n}\n\nasync function getNutrientsForProduct(productId){\n    console.log('3');\n  const livsmedelkollenAPI = 'https://api.livsmedelkollen.se/foodstuffs/'\n    const res = await fetch(livsmedelkollenAPI + \"881\",{\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'}\n    })\n    console.log('4');\n    const nutrients = await res.json()\n    return await nutrients\n}\n\n\nmodule.exports = {\n  getEntry: getEntry,\n  getAllRecipes: getAllRecipes,\n  getNutrientForAllRecipes: getNutrientForAllRecipes,\n}"]},"metadata":{},"sourceType":"script"}