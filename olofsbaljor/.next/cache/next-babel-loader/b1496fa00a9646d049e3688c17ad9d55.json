{"ast":null,"code":"\"use strict\";\n\nvar _contentful = require(\"contentful\");\n\nconst client = (0, _contentful.createClient)({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN\n});\n\nasync function getEntry(id) {\n  const recipe = await client.getEntry(id);\n  return parseForm(recipe);\n}\n\nasync function getAllRecipes() {\n  const recipes = await client.getEntries({\n    'content_type': 'recipe'\n  });\n  return recipes;\n}\n\nfunction parseForm(recipe) {\n  return {\n    recipe: recipe.fields\n  };\n}\n\nasync function getNutrientForAllRecipes(recipes) {\n  let nutrientsPerRecipe = {};\n  recipes.forEach(recipe => {\n    console.log('Hello: ', recipe);\n    const ingredients = recipe.fields.ingredients;\n    nutrientsPerRecipe[recipe.fields.title] = getNutrientsForRecipe(ingredients);\n  });\n  return nutrientsPerRecipe;\n}\n\nasync function getNutrientsForRecipe(ingredients) {\n  let recipeNutrients = {};\n  ingredients.forEach(i => {\n    const productId = i.fields.id; // const productName = i.fields.name\n\n    const productNutrients = getNutrientsForProduct(productId);\n    productNutrients.forEach(nutrient => {\n      recipeNutrients[nutrient.name] += nutrient.value;\n    });\n  });\n  return recipeNutrients;\n}\n\nasync function getNutrientsForProduct(productId) {\n  const livsmedelkollenAPI = 'https://api.livsmedelkollen.se/foodstuffs/';\n  const res = await fetch(livsmedelkollenAPI + \"881\", {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const nutrients = await res.json();\n  return nutrients;\n}\n\nmodule.exports = {\n  getEntry: getEntry,\n  getAllRecipes: getAllRecipes,\n  getNutrientForAllRecipes: getNutrientForAllRecipes\n};","map":{"version":3,"sources":["/Users/olof.marklund/Documents/projects/my_projects/olofsbaljor/olofsbaljor/lib/api.js"],"names":["client","space","process","env","NEXT_PUBLIC_CONTENTFUL_SPACE_ID","accessToken","NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN","getEntry","id","recipe","parseForm","getAllRecipes","recipes","getEntries","fields","getNutrientForAllRecipes","nutrientsPerRecipe","forEach","console","log","ingredients","title","getNutrientsForRecipe","recipeNutrients","i","productId","productNutrients","getNutrientsForProduct","nutrient","name","value","livsmedelkollenAPI","res","fetch","method","headers","nutrients","json","module","exports"],"mappings":";;AAAA;;AAEA,MAAMA,MAAM,GAAG,8BAAa;AAC1BC,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,+BADO;AAE1BC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFC,CAAb,CAAf;;AAKA,eAAeC,QAAf,CAAwBC,EAAxB,EAA4B;AACxB,QAAMC,MAAM,GAAG,MAAMT,MAAM,CAACO,QAAP,CAAgBC,EAAhB,CAArB;AACA,SAAOE,SAAS,CAACD,MAAD,CAAhB;AACD;;AAEH,eAAeE,aAAf,GAA+B;AAC3B,QAAMC,OAAO,GAAG,MAAMZ,MAAM,CAACa,UAAP,CAAkB;AAAC,oBAAgB;AAAjB,GAAlB,CAAtB;AACA,SAAOD,OAAP;AACD;;AAEH,SAASF,SAAT,CAAmBD,MAAnB,EAA2B;AACvB,SAAO;AACHA,IAAAA,MAAM,EAAEA,MAAM,CAACK;AADZ,GAAP;AAGH;;AAED,eAAeC,wBAAf,CAAwCH,OAAxC,EAAgD;AAC9C,MAAII,kBAAkB,GAAG,EAAzB;AACAJ,EAAAA,OAAO,CAACK,OAAR,CAAgBR,MAAM,IAAI;AACxBS,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBV,MAAvB;AAEA,UAAMW,WAAW,GAAGX,MAAM,CAACK,MAAP,CAAcM,WAAlC;AACAJ,IAAAA,kBAAkB,CAACP,MAAM,CAACK,MAAP,CAAcO,KAAf,CAAlB,GAA0CC,qBAAqB,CAACF,WAAD,CAA/D;AACD,GALD;AAMA,SAAOJ,kBAAP;AACD;;AAED,eAAeM,qBAAf,CAAqCF,WAArC,EAAiD;AAC/C,MAAIG,eAAe,GAAG,EAAtB;AACAH,EAAAA,WAAW,CAACH,OAAZ,CAAoBO,CAAC,IAAI;AACvB,UAAMC,SAAS,GAAGD,CAAC,CAACV,MAAF,CAASN,EAA3B,CADuB,CAEvB;;AACA,UAAMkB,gBAAgB,GAAGC,sBAAsB,CAACF,SAAD,CAA/C;AACAC,IAAAA,gBAAgB,CAACT,OAAjB,CAAyBW,QAAQ,IAAI;AACnCL,MAAAA,eAAe,CAACK,QAAQ,CAACC,IAAV,CAAf,IAAkCD,QAAQ,CAACE,KAA3C;AACD,KAFD;AAGD,GAPD;AAQA,SAAOP,eAAP;AACD;;AAED,eAAeI,sBAAf,CAAsCF,SAAtC,EAAgD;AAC9C,QAAMM,kBAAkB,GAAG,4CAA3B;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,kBAAkB,GAAG,KAAtB,EAA4B;AACjDG,IAAAA,MAAM,EAAE,KADyC;AAEjDC,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAFwC,GAA5B,CAAvB;AAIA,QAAMC,SAAS,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAxB;AACA,SAAOD,SAAP;AACD;;AAGDE,MAAM,CAACC,OAAP,GAAiB;AACfhC,EAAAA,QAAQ,EAAEA,QADK;AAEfI,EAAAA,aAAa,EAAEA,aAFA;AAGfI,EAAAA,wBAAwB,EAAEA;AAHX,CAAjB","sourcesContent":["import { createClient } from 'contentful'\n\nconst client = createClient({\n  space: process.env.NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN,\n})\n\nasync function getEntry(id) {\n    const recipe = await client.getEntry(id)\n    return parseForm(recipe)\n  }\n\nasync function getAllRecipes() {\n    const recipes = await client.getEntries({'content_type': 'recipe'})\n    return recipes\n  }\n\nfunction parseForm(recipe) {\n    return {\n        recipe: recipe.fields,\n    }\n}\n\nasync function getNutrientForAllRecipes(recipes){\n  let nutrientsPerRecipe = {}\n  recipes.forEach(recipe => {\n    console.log('Hello: ', recipe);\n    \n    const ingredients = recipe.fields.ingredients\n    nutrientsPerRecipe[recipe.fields.title] = getNutrientsForRecipe(ingredients)\n  });\n  return nutrientsPerRecipe\n}\n\nasync function getNutrientsForRecipe(ingredients){\n  let recipeNutrients = { }\n  ingredients.forEach(i => {\n    const productId = i.fields.id\n    // const productName = i.fields.name\n    const productNutrients = getNutrientsForProduct(productId)\n    productNutrients.forEach(nutrient => {\n      recipeNutrients[nutrient.name] += nutrient.value\n    });\n  });\n  return recipeNutrients\n}\n\nasync function getNutrientsForProduct(productId){\n  const livsmedelkollenAPI = 'https://api.livsmedelkollen.se/foodstuffs/'\n  const res = await fetch(livsmedelkollenAPI + \"881\",{\n    method: 'GET',\n    headers: {'Content-Type': 'application/json'}\n  })\n  const nutrients = await res.json()\n  return nutrients\n}\n\n\nmodule.exports = {\n  getEntry: getEntry,\n  getAllRecipes: getAllRecipes,\n  getNutrientForAllRecipes: getNutrientForAllRecipes,\n}"]},"metadata":{},"sourceType":"script"}